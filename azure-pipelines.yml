# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# Define variables section with Azure subscription name and app name
variables:
  azureSubscription: 'Azure Subscription 1383952(4b4cbe41-83a3-4832-9a89-e459c7fbfe0c)'
  appName: 'webapp-firma-backend'

trigger:
- staging

pool:
  name: EdwinPool

jobs:
- job: build_and_deploy
  timeoutInMinutes: 0

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.10'
      architecture: 'x64'
      githubToken: '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'
    displayName: 'Install Python3'

  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
    displayName: 'Export project path'

  - task: DownloadSecureFile@1
    inputs:
      secureFile: '.env'
    
  - task: CopyFiles@2
    inputs:
      SourceFolder: $(Agent.TempDirectory)
      Contents: '**\.env'
      TargetFolder: $(System.DefaultWorkingDirectory)

  - script: |
    make install
    workingDirectory: $(projectRoot)
  displayName: 'Install dependencies'

  # Archive Django project and save it as a build artifact
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
      replaceExistingArchive: true
  - publish: $(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip
     displayName: 'Upload package'
     artifact: drop

  # Deploy to Azure App Service using zip deploy
  - task: AzureRmWebAppDeployment@4
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: 'Azure Subscription 1383952(4b4cbe41-83a3-4832-9a89-e459c7fbfe0c)'
      appType: 'webAppLinux'
      WebAppName: 'webapp-firma-backend'
      packageForLinux: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
      RuntimeStack: 'PYTHON|3.10'
      # Add docker command to install redis
      commands: 'docker run redis -p 6379:6379 -d'
  
  - script: |
      make database
    displayName: 'Create database'

  - script:
      sh start.sh
